{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\nnjs_util                  = require 'util'\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LTSORT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\n\n### Adapted from https://github.com/eknkc/tsort ###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_graph = ( settings ) ->\n  return @_copy settings if CND.isa settings, 'LTSORT/graph'\n  settings ?= {}\n  R =\n    '~isa':       'LTSORT/graph'\n    'precedents': new Map()\n    'loners':     settings[ 'loners' ] ? yes\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_copy = ( me ) ->\n  R = @new_graph { loners: me[ 'loners' ], }\n  for [ name, precedents, ] in Array.from me[ 'precedents' ].entries()\n    R[ 'precedents' ].set name, ( precedent for precedent in precedents )\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@populate = ( me, elements ) ->\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      @add me, element\n    else\n      [ a, b, ] = element\n      @add me, a, '>', b\n  #.........................................................................................................\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_link = ( me, precedent, consequent ) ->\n  @_register me, precedent\n  @_register me, consequent\n  ( me[ 'precedents' ].get consequent ).push precedent\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_register = ( me, name ) ->\n  me[ 'precedents' ].set name, [] unless ( target = me[ 'precedents' ].get name )?\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_precedents = ( me, name ) ->\n  unless ( R = me[ 'precedents' ].get name )?\n    throw new Error \"unknown node #{rpr name}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@delete = ( me, name ) ->\n  precedents = @_get_precedents me, name\n  throw new Error \"unable to remove non-root node #{rpr name}\" unless precedents.length is 0\n  me[ 'precedents' ].delete name\n  for precedents in Array.from me[ 'precedents' ].values()\n    for idx in [ precedents.length - 1 .. 0 ] by -1\n      continue unless precedents[ idx ] is name\n      precedents.splice idx, 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@find_root_nodes = ( me, loners = null ) ->\n  if loners ? me[ 'loners' ]\n    test = ( name ) => not @_has_precedents me, name\n  else\n    test = ( name ) => ( not @_has_precedents me, name ) and ( @_is_precedent me, name )\n  return ( name for name in ( Array.from me[ 'precedents' ].keys() ) when test name )\n\n#-----------------------------------------------------------------------------------------------------------\n@_has_precedents = ( me, name ) ->\n  return ( @_get_precedents me, name ).length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@_is_precedent = ( me, name ) ->\n  for precedents in Array.from me[ 'precedents' ].values()\n    return true if ( precedents.indexOf name ) >= 0\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@find_lone_nodes = ( me, root_nodes = null ) ->\n  R = []\n  for name in ( root_nodes ? @find_root_nodes me, yes )\n    R.push name unless @_is_precedent me, name\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@has_node = ( me, name ) ->\n  return me[ 'precedents' ].has name\n\n#-----------------------------------------------------------------------------------------------------------\n@has_nodes = ( me ) ->\n  return me[ 'precedents' ].size > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( me, lhs, relation = null, rhs = null ) ->\n  switch relation\n    when '>' then return @_link me, lhs, rhs\n    when '<' then return @_link me, rhs, lhs\n    when null\n      throw new Error \"no relation given\" if rhs?\n      return @_register me, lhs\n    else\n      throw new Error \"expected '<' or '>' for relation argument, got #{CND.rpr relation}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_visit = ( me, results, marks, name ) ->\n  throw new Error \"detected cycle involving node #{rpr name}\" if marks[ name ] is 'visiting'\n  return null if marks[ name ]?\n  #.......................................................................................................\n  marks[ name ] = 'visiting'\n  #.......................................................................................................\n  for precedent in @_get_precedents me, name\n    @_visit me, results, marks, precedent\n  #.......................................................................................................\n  marks[ name ] = 'ok'\n  results.push name\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@linearize = ( me ) ->\n  ### As given in http://en.wikipedia.org/wiki/Topological_sorting ###\n  consequents     = Array.from me[ 'precedents' ].keys()\n  R               = []\n  marks           = {}\n  #.........................................................................................................\n  for consequent in consequents\n    @_visit me, R, marks, consequent unless marks[ consequent ]?\n  #.........................................................................................................\n  return R\n\n"]}