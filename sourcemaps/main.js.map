{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\nnjs_util                  = require 'util'\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LTSORT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n\n\n### Adapted from https://github.com/eknkc/tsort ###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new_graph = ( settings ) ->\n  settings ?= {}\n  R =\n    '~isa':       'CND/tsort-graph'\n    'precedents': {}\n    'loners':     settings[ 'loners' ] ? yes\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_link = ( me, precedence, consequence ) ->\n  ### TAINT check for trivial errors such as precedence == consequence ###\n  me[ 'precedents' ][ precedence ]?= []\n  ( me[ 'precedents' ][ consequence ]?= [] ).push precedence\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@_register = ( me, name ) ->\n  me[ 'precedents' ][ name ]?= []\n  return me\n\n#-----------------------------------------------------------------------------------------------------------\n@delete = ( me, name ) ->\n  throw new Error \"unknown node #{rpr name}\"                   unless name of me[ 'precedents' ]\n  throw new Error \"unable to remove non-root node #{rpr name}\" unless me[ 'precedents' ][ name ].length is 0\n  delete me[ 'precedents' ][ name ]\n  for consequence, precedences of me[ 'precedents' ]\n    for idx in [ precedences.length - 1 .. 0 ] by -1\n      continue unless precedences[ idx ] is name\n      precedences.splice idx, 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@find_root_nodes = ( me, loners = null ) ->\n  if loners ? me[ 'loners' ]\n    test = ( name ) => not @_has_precedences me, name\n  else\n    test = ( name ) => ( not @_has_precedences me, name ) and ( @_is_precedence me, name )\n  return ( name for name of me[ 'precedents' ] when test name )\n\n#-----------------------------------------------------------------------------------------------------------\n@_has_precedences = ( me, name ) ->\n  return me[ 'precedents' ][ name ].length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@_is_precedence = ( me, name ) ->\n  for _, precedences of me[ 'precedents' ]\n    return true if ( precedences.indexOf name ) >= 0\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@find_lone_nodes = ( me, root_nodes = null ) ->\n  R = []\n  for name in ( root_nodes ? @find_root_nodes me, yes )\n    R.push name unless @_is_precedence me, name\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@has_node = ( me, name ) ->\n  return name of me[ 'precedents' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@has_nodes = ( me ) ->\n  return ( Object.keys me[ 'precedents' ] ).length > 0\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( me, lhs, relation = null, rhs = null ) ->\n  switch relation\n    when '>' then return @_link me, lhs, rhs\n    when '<' then return @_link me, rhs, lhs\n    when null\n      throw new Error \"no relation given\" if rhs?\n      return @_register me, lhs\n    else\n      throw new Error \"expected '<' or '>' for relation argument, got #{CND.rpr relation}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_visit = ( me, results, marks, name ) ->\n  throw new Error \"detected cycle involving node #{CND.rpr name}\" if marks[ name ] is 'temp'\n  return null if marks[ name ]?\n  #.......................................................................................................\n  marks[ name ] = 'temp'\n  #.......................................................................................................\n  for sub_name in me[ 'precedents' ][ name ]\n    @_visit me, results, marks, sub_name\n    # urge '2234', name, sub_name\n  #.......................................................................................................\n  marks[ name ] = 'ok'\n  results.push name\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@linearize = ( me ) ->\n  ### As given in http://en.wikipedia.org/wiki/Topological_sorting ###\n  precedences     = Object.keys me[ 'precedents' ]\n  R               = []\n  marks           = {}\n  #.........................................................................................................\n  for precedence in precedences\n    # debug '4432', precedence\n    @_visit me, R, marks, precedence unless marks[ precedence ]?\n  # debug counts\n  #.........................................................................................................\n  return R\n\n"]}