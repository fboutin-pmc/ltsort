{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LTSORT/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nLTSORT                    = require './main'\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sorting\" ] = ( T ) ->\n  graph           = LTSORT.new_graph()\n  #.........................................................................................................\n  elements = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'γ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    # [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT.add graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  probe = LTSORT.linearize graph\n  #.........................................................................................................\n  for element in elements\n    continue if CND.isa_text element\n    [ a, b, ] = element\n    T.ok ( a_idx = probe.indexOf a ) >= 0\n    T.ok ( b_idx = probe.indexOf b ) >= 0\n    T.ok a_idx < b_idx\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"existence\" ] = ( T ) ->\n  graph           = LTSORT.new_graph()\n  #.........................................................................................................\n  elements = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'γ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    # [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT.add graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      T.ok LTSORT.has_node graph, element\n    else\n      [ a, b, ] = element\n      T.ok LTSORT.has_node graph, a\n      T.ok LTSORT.has_node graph, b\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"deletion\" ] = ( T ) ->\n  graph           = LTSORT.new_graph()\n  #.........................................................................................................\n  elements = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    ]\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT.add graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  T.ok LTSORT.has_node graph, 'A'\n  LTSORT.delete graph, 'A'\n  T.ok not LTSORT.has_node graph, 'A'\n  #.........................................................................................................\n  T.throws \"unknown node 'XXX'\", ( => LTSORT.delete graph, 'XXX' )\n  T.throws \"unable to remove non-root node 'X'\", ( => LTSORT.delete graph, 'X' )\n  #.........................................................................................................\n  T.ok LTSORT.has_node graph, 'B'\n  LTSORT.delete graph, 'B'\n  T.ok not LTSORT.has_node graph, 'B'\n  #.........................................................................................................\n  T.ok LTSORT.has_node graph, 'X'\n  LTSORT.delete graph, 'X'\n  T.ok not LTSORT.has_node graph, 'X'\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"root nodes, lone nodes (1)\" ] = ( T ) ->\n  #.........................................................................................................\n  elements = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    ]\n  #.........................................................................................................\n  graph = LTSORT.new_graph()\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT.add graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  T.eq ( LTSORT.find_root_nodes graph ),        [ 'A', 'B', 'F' ]\n  T.eq ( LTSORT.find_root_nodes graph, true ),  [ 'A', 'B', 'F' ]\n  T.eq ( LTSORT.find_root_nodes graph, false ), [ 'A', 'B' ]\n  T.eq ( LTSORT.find_lone_nodes graph ),        [ 'F' ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"root nodes, lone nodes (2)\" ] = ( T ) ->\n  #.........................................................................................................\n  elements = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    ]\n  #.........................................................................................................\n  graph = LTSORT.new_graph loners: no\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT.add graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  T.eq ( LTSORT.find_root_nodes graph ),        [ 'A', 'B', ]\n  T.eq ( LTSORT.find_root_nodes graph, true ),  [ 'A', 'B', 'F' ]\n  T.eq ( LTSORT.find_root_nodes graph, false ), [ 'A', 'B' ]\n  T.eq ( LTSORT.find_lone_nodes graph ),        [ 'F' ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_demo = ( S ) ->\n  graph           = LTSORT.new_graph()\n  #.........................................................................................................\n  elements = [\n    [ 'A', 'X', ]\n    [ 'B', 'X', ]\n    'F'\n    [ 'X', 'Y', ]\n    [ 'X', 'Z', ]\n    [ 'γ', 'B', ]\n    [ 'Z', 'Ψ', ]\n    # [ 'Ψ', 'Ω', ]\n    [ 'Z', 'Ω', ]\n    [ 'β', 'A', ]\n    [ 'α', 'β', ]\n    ]\n  #.........................................................................................................\n  for element in elements\n    if CND.isa_text element\n      LTSORT._register graph, element\n    else\n      [ a, b, ] = element\n      LTSORT.add graph, a, '>', b\n  #.........................................................................................................\n  for element in LTSORT.linearize graph\n    help element\n  #.........................................................................................................\n  debug graph\n  # help LTSORT.find_root_nodes graph, no\n  if LTSORT.has_nodes graph\n    if ( lone_nodes = LTSORT.find_lone_nodes graph ).length > 0\n      info CND.rainbow lone_nodes\n      LTSORT.delete graph, lone_node for lone_node in lone_nodes\n  while LTSORT.has_nodes graph\n    root_nodes = LTSORT.find_root_nodes graph\n    info CND.rainbow root_nodes\n    LTSORT.delete graph, root_node for root_node in root_nodes\n  # debug graph\n  # CND.dir LTSORT\n  return null\n\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  test @, 'timeout': 2500\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n############################################################################################################\nunless module.parent?\n  # include = []\n  # @_prune()\n  @_demo()\n  @_main()\n\n"]}